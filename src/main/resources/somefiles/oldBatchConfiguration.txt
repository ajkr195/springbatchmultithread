package com.spring.batch.config;

import javax.sql.DataSource;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;

import com.spring.batch.itemprocessor.SalesItemProcessor;
import com.spring.batch.listener.InterceptingJobExecution;
import com.spring.batch.listener.JobCompletionNotificationListener;
import com.spring.batch.model.Sales;
import com.spring.batch.tasklets.TaskThree;
import com.spring.batch.tasklets.TaskTwo;

@Configuration
@EnableBatchProcessing
@ComponentScan(basePackages = "com.spring.batch.*")
public class oldBatchConfiguration {

	@Autowired
	public JobBuilderFactory jobBuilderFactory;

	@Autowired
	public StepBuilderFactory stepBuilderFactory;
	
	@Autowired
	InterceptingJobExecution interceptingJob;

	// tag::readerwriterprocessor[]
	@Bean
	public FlatFileItemReader<Sales> reader() {
		return new FlatFileItemReaderBuilder<Sales>().name("saleItemReader").linesToSkip(1)
				.resource(new ClassPathResource("10sales.csv")).delimited()
				.names(new String[] { "region", "country", "itemtype", "saleschannel", "orderpriority", "orderdate",
						"orderid", "shipdate", "unitssold", "unitprice", "unitcost", "totalrevenue", "totalcost",
						"totalprofit" })
				.fieldSetMapper(new BeanWrapperFieldSetMapper<Sales>() {
					{
						setTargetType(Sales.class);
					}
				}).build();
	}

	@Bean
	public SalesItemProcessor processor() {
		return new SalesItemProcessor();
	}

	@Bean
	public JdbcBatchItemWriter<Sales> writer(DataSource dataSource) {
		return new JdbcBatchItemWriterBuilder<Sales>()
				.itemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>())
				.sql("INSERT INTO salesreport (region, country, itemtype, saleschannel, orderpriority,orderdate, orderid, shipdate, "
						+ "unitssold, unitprice, unitcost, totalrevenue, totalcost, totalprofit) "
						+ "VALUES (:region, :country, :itemtype, :saleschannel, :orderpriority, :orderdate, :orderid"
						+ ", :shipdate, :unitssold, :unitprice, :unitcost, :totalrevenue, :totalcost, :totalprofit)")
				.dataSource(dataSource).build();
	}
	// end::readerwriterprocessor[]

	// tag::jobstep[]
	@Bean
	public Job importSalesJob(JobCompletionNotificationListener listener, Step step1) {
		return jobBuilderFactory.get("importSalesJob")
				.incrementer(new RunIdIncrementer())
				.listener(listener)
				.flow(step1).end().build();
	}

	@Bean
	public Step step1(JdbcBatchItemWriter<Sales> writer) {
		return stepBuilderFactory.get("step1").<Sales, Sales>chunk(1)
				.reader(reader())
				.processor(processor())
				.faultTolerant()
				//.skipLimit(0) //default is set to 0
				.writer(writer)
				//.startLimit(1)
				.build();
	}
	// end::jobstep[]
	
	
	@Bean
	public Job importSecondJob(Step step2) {
		return jobBuilderFactory.get("importSecondJob")
				.incrementer(new RunIdIncrementer())
				//.preventRestart() // By default all jobs are re-startable. Use this if want to restrict it.
				.flow(step2)
				.end()
				.listener(interceptingJob)
				.build();
	}
	
	@Bean
	public Job importThirdJob(Step step3) {
		return jobBuilderFactory.get("importThirdJob")
				.incrementer(new RunIdIncrementer())
				//.preventRestart()
				.flow(step3)
				.end()
				.build();
	}
	
	
	@Bean
	public Step step2() {
	        return stepBuilderFactory.get("step2")
	                .tasklet(new TaskTwo())
	                .build();
	}
	     
	@Bean
	public Step step3() {
	        return stepBuilderFactory.get("step3")
	                .tasklet(new TaskThree())
	                .build();
	}
	
	
}